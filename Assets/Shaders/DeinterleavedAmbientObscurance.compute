#pragma kernel DeinterleaveDepthTexture
#pragma kernel EvaluateObscuranceX
#pragma kernel EvaluateObscuranceY
#pragma kernel Assemble
#pragma kernel BlurX
#pragma kernel BlurY
#include "ImageSpaceOperations.cginc"

Texture2D<float> _DepthTex;
Texture2D<float4> _NormalTex;
RWTexture2DArray<float4> _DepthTexVol;       // Four slices of half-res depth tex
RWTexture2DArray<float> _RawResultVol;      // Four slices of half-res result (unfiltered)
RWTexture2D<float> _RawResult;              // Assembled, unfiltered full-res result
RWTexture2D<float> _XFilteredResult;        // Full-res, x-pass filter
RWTexture2D<float> _YFilteredResult;        // Final result

#define MAX_SAMPLE_PER_AXIS 8
#define DIRECTION_COUNT 4
int _VolSliceInx;              
float4x4 _InvProjMatrix;
float4x4 _ViewMatrix;
float4 _IDToUVHalfRes;
float4 _IDToUVFullRes;
float4 _SampleData[4 * DIRECTION_COUNT];
int _SampleDataInxOffset;
float _TanHalfFoV;
float _AspectRatio;
float _Sigma;                               // Intensity modifier
float _Beta;                                // Base depth bias
#define EPSILON 0.001f                      // Zero division guard
float _WorldSpaceRoI;                       // Base world-space radius of interest
int _CuttOffDistantSamples;
float4 _VectorizedRotationMatrix;
float _BilateralFilterRadius;

static const float filterWeights[5] =
{
    0.382928, 0.241732, 0.060598, 0.005977, 0.000229
};

// Spilt the full-res z-buffer into 4 half-res z-buffer (a 4-slice texture volume)
[numthreads(16, 12, 1)]
void DeinterleaveDepthTexture(uint3 id : SV_DispatchThreadID)
{
    
    const uint slice = id.x % 2u + id.y % 2u * 2u;
    const uint2 outputId = uint2(id.x / 2u, id.y / 2u);
	const float depthValue = _DepthTex[id.xy];
	const float2 fragUV = _IDToUVFullRes.xy * (id.xy + float2(0.5f, 0.5f));
	const float3 fragPos = findViewPos(depthValue, fragUV, _InvProjMatrix);
    
	_DepthTexVol[uint3(outputId, slice)] = float4(fragPos, depthValue);
    
}

// Compute AO, x-axis pass. 4 dispatches, one for each half-res z-buffer
[numthreads(16, 12, 1)]
void EvaluateObscuranceX(uint3 id : SV_DispatchThreadID)
{
    const float2 fragUV = _IDToUVHalfRes.xy * (id.xy + float2(0.5f, 0.5f));
	const float4 fragBuffer = _DepthTexVol[uint3(id.xy, _VolSliceInx)].xyzw;
	const float3 fragPos = fragBuffer.xyz;
    const float3 fragNorm = findViewNormal(_NormalTex, uint2(2u * id.x + _VolSliceInx % 2u, 2u * id.y + _VolSliceInx / 2u), _ViewMatrix);

    const float baseUVRadiusY = min(_WorldSpaceRoI / (_TanHalfFoV * 2.0f * (-fragPos.z)), 0.2f);
    const float trueWorldRadius = baseUVRadiusY * 2.0f * -fragPos.z * _TanHalfFoV;                      // Clamp the UV radius for close-up pixels
    const float2 trueUVRadius = float2(baseUVRadiusY / _AspectRatio, baseUVRadiusY);
    const float trueSqaureRadius = trueWorldRadius * trueWorldRadius;

    const float4 vectorizedRotationMatrix = _VectorizedRotationMatrix * 2 - 1;
    const float2x2 passRotationMatrix = float2x2(vectorizedRotationMatrix[0], vectorizedRotationMatrix[1],
        vectorizedRotationMatrix[2], vectorizedRotationMatrix[3]);

    float obscurance = 0.0f;

    // 16 spp, with 8 along each axis.
    // Each axis reads 8 values from 2 Vector4, [a0, a1, a2, a3] [b0, b1, b2, b3]
    // Eg for x-pass, the sample offset vectors would be [x+a0,y], [x+a1,y], ... , [x+b2,y], [x+b3,y]
    const float sampleCoords[MAX_SAMPLE_PER_AXIS] =
    {
        _SampleData[_SampleDataInxOffset].x,
        _SampleData[_SampleDataInxOffset].y,
        _SampleData[_SampleDataInxOffset].z,
        _SampleData[_SampleDataInxOffset].w,
        -_SampleData[1 + _SampleDataInxOffset].x,
        -_SampleData[1 + _SampleDataInxOffset].y,
        -_SampleData[1 + _SampleDataInxOffset].z,
        -_SampleData[1 + _SampleDataInxOffset].w
    };

    [unroll]
    for (uint inx = 0; inx < MAX_SAMPLE_PER_AXIS; ++inx)
    {
        const float2 sampleUV = fragUV + mul(passRotationMatrix, float2(sampleCoords[inx], 0) * trueUVRadius);
		const float3 samplePos = _DepthTexVol[uint3(sampleUV / _IDToUVHalfRes.xy, _VolSliceInx)].xyz;

        const float3 queryRay = samplePos - fragPos;
        const float queryRaySqaureLength = dot(queryRay, queryRay);
        obscurance += (_CuttOffDistantSamples && (queryRaySqaureLength > trueSqaureRadius) ? 0 :
            max(0, dot(queryRay, fragNorm) + fragPos.z * _Beta) / (queryRaySqaureLength + EPSILON));

    }

     // We avg the result from X-pass and Y-pass. So we divide it by 2 here
	_RawResultVol[uint3(id.xy, _VolSliceInx)] = max(0.0f, 1.0f - _Sigma * obscurance / MAX_SAMPLE_PER_AXIS) / 2;
}

// Compute AO, y-axis pass. 4 dispatches, one for each half-res z-buffer
[numthreads(16, 12, 1)]
void EvaluateObscuranceY(uint3 id : SV_DispatchThreadID)
{
    
    const float2 fragUV = _IDToUVHalfRes.xy * (id.xy + float2(0.5f, 0.5f));
	const float3 fragPos = _DepthTexVol[uint3(id.xy, _VolSliceInx)].xyz;
    const float3 fragNorm = findViewNormal(_NormalTex, uint2(2u * id.x + _VolSliceInx % 2u, 2u * id.y + _VolSliceInx / 2u), _ViewMatrix);

    const float baseUVRadiusY = min(_WorldSpaceRoI / (_TanHalfFoV * 2.0f * (-fragPos.z)), 0.2f);
    const float trueWorldRadius = baseUVRadiusY * 2.0f * -fragPos.z * _TanHalfFoV;
    const float2 trueUVRadius = float2(baseUVRadiusY / _AspectRatio, baseUVRadiusY);
    const float trueSqaureRadius = trueWorldRadius * trueWorldRadius;

    const float4 vectorizedRotationMatrix = _VectorizedRotationMatrix * 2 - 1;
    const float2x2 passRotationMatrix = float2x2(vectorizedRotationMatrix[0], vectorizedRotationMatrix[1],
        vectorizedRotationMatrix[2], vectorizedRotationMatrix[3]);

    float obscurance = 0.0f;
    const float sampleCoords[MAX_SAMPLE_PER_AXIS] =
    {
        _SampleData[_SampleDataInxOffset].x,
        _SampleData[_SampleDataInxOffset].y,
        _SampleData[_SampleDataInxOffset].z,
        _SampleData[_SampleDataInxOffset].w,
        -_SampleData[1 + _SampleDataInxOffset].x,
        -_SampleData[1 + _SampleDataInxOffset].y,
        -_SampleData[1 + _SampleDataInxOffset].z,
        -_SampleData[1 + _SampleDataInxOffset].w
    };

    [unroll]
    for (uint inx = 0; inx < MAX_SAMPLE_PER_AXIS; ++inx)
    {
        const float2 sampleUV = fragUV + mul(passRotationMatrix, float2(0, sampleCoords[inx]) * trueUVRadius);
		const float3 samplePos = _DepthTexVol[uint3(sampleUV / _IDToUVHalfRes.xy, _VolSliceInx)].xyz;

        const float3 queryRay = samplePos - fragPos;
        const float queryRaySqaureLength = dot(queryRay, queryRay);
        obscurance += (_CuttOffDistantSamples && (queryRaySqaureLength > trueSqaureRadius) ? 0 :
            max(0, dot(queryRay, fragNorm) + fragPos.z * _Beta) / (queryRaySqaureLength + EPSILON));

    }

	_RawResultVol[uint3(id.xy, _VolSliceInx)] += max(0.0f, 1.0f - _Sigma * obscurance / MAX_SAMPLE_PER_AXIS) / 2;

}

[numthreads(16, 12, 1)]
void Assemble(uint3 id : SV_DispatchThreadID)
{
    const uint targetTextureInx = id.x % 2u + id.y % 2u * 2u;
    const uint2 targetTextureCoords = uint2(id.x / 2u, id.y / 2u);
    
    _RawResult[id.xy] = _RawResultVol[uint3(targetTextureCoords, targetTextureInx)];
}

[numthreads(16, 12, 1)]
void BlurX(uint3 id : SV_DispatchThreadID)
{

	const float2 fragUV = _IDToUVFullRes.xy * (id.xy + float2(0.5f, 0.5f));

	const float depthValue = _DepthTex[id.xy];
	const float3 fragPos = findViewPos(depthValue, fragUV, _InvProjMatrix);

    float result = _RawResult[id.xy].x * filterWeights[0];
	float accWeight = filterWeights[0];

	[unroll]
    for (int x = -4; x <= 4; ++x)
    {
        if (x == 0)
            continue;
        else
        {
            const uint2 sampleID = id.xy + uint2(x, 0);
			const float2 sampleUV = _IDToUVFullRes.xy * (sampleID.xy + float2(0.5f, 0.5f));

			const float sampleDepthValue = _DepthTex[sampleID.xy];
			const float3 samplePos = findViewPos(sampleDepthValue, sampleUV, _InvProjMatrix);
			const float queryRayLength = clamp(abs(length(samplePos - fragPos)), 0.0f, _BilateralFilterRadius);
			const float disWeight = lerp(1.0f, 0.0f, queryRayLength / _BilateralFilterRadius);

            result += _RawResult[sampleID].r * filterWeights[abs(x)] * disWeight;
			accWeight += filterWeights[abs(x)] * disWeight;
        }
    }
    
	_XFilteredResult[id.xy] = result / accWeight;
}

[numthreads(16, 12, 1)]
void BlurY(uint3 id : SV_DispatchThreadID)
{

    float result = _XFilteredResult[id.xy].x * filterWeights[0];
	float accWeight = filterWeights[0];

	const float2 fragUV = _IDToUVFullRes.xy * (id.xy + float2(0.5f, 0.5f));
	const float depthValue = _DepthTex[id.xy];
	const float3 fragPos = findViewPos(depthValue, fragUV, _InvProjMatrix);

	[unroll]
    for (int x = -4; x <= 4; ++x)
    {
        if (x == 0)
            continue;
        else
        {
			const uint2 sampleID = id.xy + uint2(0, x);
			const float2 sampleUV = _IDToUVFullRes.xy * (sampleID.xy + float2(0.5f, 0.5f));

			const float sampleDepthValue = _DepthTex[sampleID.xy];
			const float3 samplePos = findViewPos(sampleDepthValue, sampleUV, _InvProjMatrix);
			const float queryRayLength = clamp(abs(length(samplePos - fragPos)), 0.0f, _BilateralFilterRadius);
			const float disWeight = lerp(1.0f, 0.0f, queryRayLength / _BilateralFilterRadius);

			result += _XFilteredResult[sampleID].r * filterWeights[abs(x)] * disWeight;
			accWeight += filterWeights[abs(x)] * disWeight;
        }
    }
    
    _YFilteredResult[id.xy] = result / accWeight;

}

